plugins {
	id 'java'
	id "com.diffplug.spotless" version "6.20.0"
}

group 'jws'
version '1.0-SNAPSHOT'

jar {
	manifest {
		attributes(
				'Main-Class': 'org.jws.Main'
		)
	}

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	compileOnly 'org.immutables:value:2.10.1'
	annotationProcessor 'org.immutables:value:2.10.1'
	testAnnotationProcessor 'org.immutables:value:2.10.1'
	testImplementation 'org.mockito:mockito-core:2.1.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
	implementation 'com.google.dagger:dagger:2.50'
	annotationProcessor 'com.google.dagger:dagger-compiler:2.50'
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	implementation 'org.projectlombok:lombok:1.18.30'
	implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
	implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
	implementation 'org.mongodb:mongodb-driver-sync:5.2.0'
}

test {
	useJUnitPlatform()
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeader '/* (C)$YEAR */'
	}
}

test {
	testLogging {
		events "passed", "failed", "skipped"
		exceptionFormat "full"
		showStandardStreams = true
	}
}
